name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to EC2 via SSH
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          # Salvar chave SSH
          echo "$KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Conectar e fazer deploy
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${HOST} << 'EOF'
            # Atualizar reposit√≥rio
            if [ ! -d ~/chat-atendimento ]; then
              git clone https://github.com/${{ github.repository }}.git ~/chat-atendimento
            fi
            
            cd ~/chat-atendimento
            git pull origin main
            
            # Criar .env se n√£o existir
            if [ ! -f .env ]; then
              cat > .env << 'ENVFILE'
NODE_ENV=production
MONGODB_URI=${{ secrets.MONGODB_URI }}
JWT_SECRET=${{ secrets.JWT_SECRET }}
CLIENT_URL=http://${{ secrets.EC2_HOST }}
VITE_API_URL=http://${{ secrets.EC2_HOST }}:5000/api
VITE_SOCKET_URL=http://${{ secrets.EC2_HOST }}:5000
S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
ENVFILE
            fi
            
            # Verificar se Docker est√° instalado
            if ! command -v docker &> /dev/null; then
              echo "Instalando Docker..."
              sudo yum update -y
              sudo yum install docker git -y
              sudo service docker start
              sudo usermod -a -G docker ec2-user
              
              # Instalar Docker Compose
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              
              # Aplicar grupo docker na sess√£o atual
              newgrp docker
            fi
            
            # Build e restart containers
            docker-compose down || true
            docker-compose up -d --build
            
            # Limpar imagens antigas
            docker image prune -f
            
            echo "‚úÖ Deploy conclu√≠do!"
            echo "üåê Aplica√ß√£o rodando em http://${{ secrets.EC2_HOST }}"
          EOF
          
          # Limpar chave
          rm private_key.pem
      
      - name: Verificar sa√∫de da aplica√ß√£o
        run: |
          sleep 10
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:5000/health || echo "000")
          if [ "$response" = "200" ]; then
            echo "‚úÖ API est√° saud√°vel!"
          else
            echo "‚ö†Ô∏è API retornou c√≥digo: $response"
            echo "Verifique os logs com: ssh ec2-user@${{ secrets.EC2_HOST }} 'cd ~/chat-atendimento && docker-compose logs'"
          fi
