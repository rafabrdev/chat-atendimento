name: Deploy Staging

on:
  push:
    branches: [ staging ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: chat-atendimento-staging

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm ci
        
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
        
    - name: Run Backend Tests
      working-directory: ./backend
      run: |
        npm run lint || true
        # npm test
        
    - name: Run Frontend Tests
      working-directory: ./frontend
      run: |
        # npm test
        echo "Frontend tests placeholder"

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Build Backend
      working-directory: ./backend
      env:
        NODE_ENV: staging
        MONGODB_URI: ${{ secrets.MONGODB_URI_STAGING }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_STAGING }}
      run: |
        npm ci
        echo "Backend build completed for staging"
        
    - name: Build Frontend
      working-directory: ./frontend
      env:
        REACT_APP_API_URL: ${{ secrets.API_URL_STAGING }}
        REACT_APP_ENV: staging
      run: |
        npm ci
        npm run build
        
    - name: Create S3 Bucket if not exists
      run: |
        aws s3api head-bucket --bucket ${{ secrets.S3_BUCKET_STAGING }} 2>/dev/null || \
        aws s3api create-bucket --bucket ${{ secrets.S3_BUCKET_STAGING }} --region ${{ env.AWS_REGION }}
        
    - name: Deploy to EC2
      id: deploy
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY_STAGING }}
        HOSTNAME: ${{ secrets.EC2_HOST_STAGING }}
        USER_NAME: ${{ secrets.EC2_USER }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        
        # Create deployment directory on EC2
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          mkdir -p ~/chat-atendimento-staging
          cd ~/chat-atendimento-staging
          
          # Stop existing containers
          docker-compose down 2>/dev/null || true
        '
        
        # Copy files to EC2
        scp -o StrictHostKeyChecking=no -i private_key -r \
          ./backend ./frontend ./docker-compose.staging.yml .env.staging \
          ${USER_NAME}@${HOSTNAME}:~/chat-atendimento-staging/
        
        # Start application
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          cd ~/chat-atendimento-staging
          
          # Set environment variables
          export NODE_ENV=staging
          export MONGODB_URI="${{ secrets.MONGODB_URI_STAGING }}"
          export JWT_SECRET="${{ secrets.JWT_SECRET }}"
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export S3_BUCKET_NAME="${{ secrets.S3_BUCKET_STAGING }}"
          
          # Build and start containers
          docker-compose -f docker-compose.staging.yml up -d --build
          
          # Wait for services to be healthy
          sleep 10
          
          # Check status
          docker-compose -f docker-compose.staging.yml ps
        '
        
        echo "url=http://${HOSTNAME}" >> $GITHUB_OUTPUT
        
    - name: Health Check
      run: |
        sleep 15
        curl -f http://${{ secrets.EC2_HOST_STAGING }}/api/health || exit 1
        
    - name: Upload Deployment Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: staging-deployment
        path: |
          backend/
          frontend/build/
          docker-compose.staging.yml
          
  notify:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Success
      if: success()
      run: |
        echo "✅ Staging deployment successful!"
        echo "URL: http://${{ secrets.EC2_HOST_STAGING }}"
        echo "Branch: staging"
        echo "Commit: ${{ github.sha }}"
        echo "Deployed by: ${{ github.actor }}"
        
    - name: Notify Failure
      if: failure()
      run: |
        echo "❌ Staging deployment failed!"
        echo "Please check the logs for errors."
