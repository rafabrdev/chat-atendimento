const mongoose = require('mongoose');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../.env') });

// Importar modelos
const User = require('../models/User');
const Tenant = require('../models/Tenant');

async function assignUsersToTenant() {
  try {
    // Conectar ao MongoDB
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/chat-atendimento');
    console.log('‚úÖ Conectado ao MongoDB');
    
    // Buscar o tenant default
    const defaultTenant = await Tenant.findOne({ key: 'default' });
    
    if (!defaultTenant) {
      console.log('‚ùå Tenant default n√£o encontrado. Execute o seed primeiro!');
      return;
    }
    
    console.log(`‚úÖ Tenant default encontrado: ${defaultTenant.name} (${defaultTenant._id})`);
    
    // Buscar usu√°rios sem tenantId (exceto master)
    const usersWithoutTenant = await User.find({
      tenantId: { $exists: false },
      role: { $ne: 'master' }
    });
    
    console.log(`\nüìä Encontrados ${usersWithoutTenant.length} usu√°rios sem tenant`);
    
    if (usersWithoutTenant.length > 0) {
      console.log('\nüîß Atualizando usu√°rios...\n');
      
      for (const user of usersWithoutTenant) {
        // Atualizar usu√°rio com tenantId
        await User.updateOne(
          { _id: user._id },
          { $set: { tenantId: defaultTenant._id } }
        );
        
        console.log(`   ‚úÖ ${user.email} - atribu√≠do ao tenant ${defaultTenant.name}`);
      }
      
      console.log(`\n‚úÖ Total de ${usersWithoutTenant.length} usu√°rios atualizados!`);
    }
    
    // Verificar master users (n√£o devem ter tenantId)
    const masterUsers = await User.find({ role: 'master' });
    console.log(`\nüëë ${masterUsers.length} usu√°rios master encontrados (n√£o precisam de tenant)`);
    
    for (const master of masterUsers) {
      if (master.tenantId) {
        // Remover tenantId de master
        await User.updateOne(
          { _id: master._id },
          { $unset: { tenantId: '' } }
        );
        console.log(`   ‚ö†Ô∏è  Removido tenantId de master: ${master.email}`);
      } else {
        console.log(`   ‚úÖ Master sem tenant (correto): ${master.email}`);
      }
    }
    
    // Estat√≠sticas finais
    console.log('\nüìà Estat√≠sticas Finais:');
    console.log('=' .repeat(50));
    
    const stats = await User.aggregate([
      {
        $group: {
          _id: {
            role: '$role',
            hasTenant: { $cond: [{ $ifNull: ['$tenantId', false] }, true, false] }
          },
          count: { $sum: 1 }
        }
      },
      { $sort: { '_id.role': 1 } }
    ]);
    
    stats.forEach(stat => {
      console.log(`   ${stat._id.role} (${stat._id.hasTenant ? 'COM' : 'SEM'} tenant): ${stat.count}`);
    });
    
    // Verificar se todos os n√£o-master t√™m tenant agora
    const nonMasterWithoutTenant = await User.countDocuments({
      tenantId: { $exists: false },
      role: { $ne: 'master' }
    });
    
    if (nonMasterWithoutTenant === 0) {
      console.log('\n‚úÖ SUCESSO: Todos os usu√°rios n√£o-master t√™m tenant!');
    } else {
      console.log(`\n‚ö†Ô∏è  ATEN√á√ÉO: Ainda existem ${nonMasterWithoutTenant} usu√°rios n√£o-master sem tenant`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\n‚úÖ Conex√£o fechada');
  }
}

// Executar
assignUsersToTenant();
